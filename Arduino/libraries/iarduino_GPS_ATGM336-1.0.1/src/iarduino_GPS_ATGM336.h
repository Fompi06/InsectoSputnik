//	Библиотека для работы с GPS модулем ATGM336: https://iarduino.ru/shop/Expansion-payments/gps-glonass-modul-trema-modul.html
//  Версия: 1.0.1
//  Последнюю версию библиотеки Вы можете скачать по ссылке: https://iarduino.ru/file/539.html
//  Подробное описание функций бибилиотеки доступно по ссылке: https://wiki.iarduino.ru/page/GPS-module/
//  Библиотека является собственностью интернет магазина iarduino.ru и может свободно использоваться и распространяться!
//  При публикации устройств или скетчей с использованием данной библиотеки, как целиком, так и её частей,
//  в том числе и в некоммерческих целях, просим Вас опубликовать ссылку: http://iarduino.ru
//  Автор библиотеки: Панькин Павел.
//  Если у Вас возникли технические вопросы, напишите нам: shop@iarduino.ru

#ifndef iarduino_GPS_ATGM336_h																										//
#define iarduino_GPS_ATGM336_h																										//
																																	//
#include "SoftwareSerial.h"																											//
																																	//
#if defined(ARDUINO) && (ARDUINO >= 100)																							//
#include		<Arduino.h>																											//
#else																																//
#include		<WProgram.h>																										//
#endif																																//
																																	//
#define GPS_HOT_START		0																										//	Парамер функции reset()       указывающий стартовать с сохранением заданных настроек и данных о спутниках.
#define GPS_WARM_START		1																										//	Парамер функции reset()       указывающий стартовать с сохранением заданных настроек.
#define GPS_COLD_START		2																										//	Парамер функции reset()       указывающий стартовать с сохранением заданных настроек и сбросом данных о спутниках.
#define GPS_FACTORY_SET		3																										//	Парамер функции reset()       указывающий стартовать с восстановлением заводских настроек и сбросом данных о спутниках.
#define GPS_GP				0																										//	Парамер функции system()      указывающий использовать навигационную систему GPS.
#define GPS_BD				1																										//	Парамер функции system()      указывающий использовать навигационную систему Beidu.
#define GPS_GL				2																										//	Парамер функции system()      указывающий использовать навигационную систему Glonass.
#define GPS_PORTABLE		0																										//	Парамер функции model()       указывающий на использование модуля в портативном устройстве.
#define GPS_STATIC			1																										//	Парамер функции model()       указывающий на использование модуля в статично.
#define GPS_WALKING			2																										//	Парамер функции model()       указывающий на использование модуля пешеходом.
#define GPS_VEHICLE			3																										//	Парамер функции model()       указывающий на использование модуля в автомобиле.
#define GPS_VOYAGE			4																										//	Парамер функции model()       указывающий на использование модуля на морском судне.
#define GPS_AVIATION_1G		5																										//	Парамер функции model()       указывающий на использование модуля на воздушном судне < 1g.
#define GPS_AVIATION_2G		6																										//	Парамер функции model()       указывающий на использование модуля на воздушном судне < 2g.
#define GPS_AVIATION_4G		7																										//	Парамер функции model()       указывающий на использование модуля на воздушном судне < 4g.
#define NMEA_GGA			1																										//	Парамер функции composition() указывающий включить строку с идентификатором GGA в пакет NMEA.
#define NMEA_GLL			2																										//	Парамер функции composition() указывающий включить строку с идентификатором GLL в пакет NMEA.
#define NMEA_GSA			3																										//	Парамер функции composition() указывающий включить строку с идентификатором GSA в пакет NMEA.
#define NMEA_GSV			4																										//	Парамер функции composition() указывающий включить строку с идентификатором GSV в пакет NMEA.
#define NMEA_RMC			5																										//	Парамер функции composition() указывающий включить строку с идентификатором RMC в пакет NMEA.
#define NMEA_VTG			6																										//	Парамер функции composition() указывающий включить строку с идентификатором VTG в пакет NMEA.
#define NMEA_ZDA			7																										//	Парамер функции composition() указывающий включить строку с идентификатором ZDA в пакет NMEA.
#define NMEA_ANT			8																										//	Парамер функции composition() указывающий включить строку с идентификатором TXT с информацией о качестве антенны в пакет NMEA.
#define NMEA_DHV			9																										//	Парамер функции composition() указывающий включить строку с идентификатором DHV в пакет NMEA.
#define NMEA_TXT			10																										//	Парамер функции composition() указывающий включить строку с идентификатором TXT с информацией о чём то недокументорованном в пакет NMEA.
#define NMEA_GST			11																										//	Парамер функции composition() указывающий включить строку с идентификатором GST в пакет NMEA.
																																	//
class iarduino_GPS_ATGM336{																											//
	public:																															//
	/**	Пользовательские функции **/																								//
		bool		begin			(HardwareSerial &i				){ _flgTypeSerial=1; _objSerial=&i; return _begin(); }			//	Определяем функцию инициализации работы с модулем		(Параметр:  объект для работы с аппаратным  UART).
		bool		begin			(SoftwareSerial &i				){ _flgTypeSerial=2; _objSerial=&i; return _begin(); }			//	Определяем функцию инициализации работы с модулем		(Параметр:  объект для работы с программным UART).
		void		save			(void							);																//	Объявляем  функцию сохранения настроек в Flash модуля	(Параметр:  отсутствует).
		uint32_t	baudrate		(uint32_t=0						);																//	Объявляем  функцию установки скорости					(Параметр:  скорость 4800/9600/19200/38400/57600/115200, если параметр отсутствует то будет установлена скорость на которую настроен модуль).
		void		updaterate		(uint8_t						);																//	Объявляем  функцию установки частоты обновления данных	(Параметр:  частота обновления данных от 1 до 10 раз в секунду).
		void		composition		(uint8_t=0,uint8_t=0,uint8_t=0,uint8_t=0,uint8_t=0,uint8_t=0,uint8_t=0,uint8_t=0,uint8_t=0,uint8_t=0,uint8_t=0);	//	Объявляем функцию установки состава пакета NMEA	(Параметры: флаги наличия строк с указанными идентификаторами в пакетах NMEA в любой комбинации).
		void		system			(uint8_t=4,uint8_t=4,uint8_t=4	);																//	Объявляем  функцию выбора навигационных систем			(Параметры:	GPS_GP/GPS_GL/GPS_BD в любой комбинации).
		void		version			(float							);																//	Объявляем  функцию выбора версии NMEA					(Параметр:  версия NMEA: 2.2/4.0/4.1).
		void		reset			(uint8_t						);																//	Объявляем  функцию перезагрузки модуля					(Параметр:  тип старта после перезагрузки GPS_HOT_START/GPS_WARM_START/GPS_COLD_START/GPS_FACTORY_SET).
		void		model			(uint8_t						);																//	Объявляем  функцию выбора модели использования модуля	(Параметр:  тип модели GPS_PORTABLE/GPS_STATIC/GPS_WALKING/GPS_VEHICLE/GPS_VOYAGE/GPS_AVIATION_1G/GPS_AVIATION_2G/GPS_AVIATION_4G).
	/**	Пользовательские переменные **/																								//
	private:																														//
	/**	Внутренние переменные **/																									//
		void*		_objSerial;																										//	Объявляем  указатель на объект работы с UART			(Serial, Serial1, ..., SoftwareSerial).
		uint8_t		_flgTypeSerial	= 0;																							//	Определяем флаг указывающий на тип соединения			(0-нет, 1-HardwareSerial, 2-SoftwareSerial).
	/**	Внутренние функции **/																										//
		bool		_begin			(void							);																//	Объявляем  функцию инициализации работы с модулем		(Параметр:  отсутствует).
		bool		_waitNMEA		(void							);																//	Объявляем  функцию ожидания любого опратора NMEA		(Параметр:  отсутствует).
		void		_printCommand	(const char*					);																//	Объявляем  функцию отправки команды с контрольн суммой	(Параметр:  строка состоящая из номера команды и её параметров).
		bool		_SerialReady	(void							);																//	Объявляем  функцию проверки готовности UART				(Параметр:  отсутствует).
		uint8_t		_SerialRead		(void							);																//	Объявляем  функцию чтения байта из буфера UART			(Параметр:  отсутствует).
		uint8_t		_SerialAvailable(void							);																//	Объявляем  функцию чтения заполненности буфера UART		(Параметр:  отсутствует).
		void		_SerialPrint	(const char*					);																//	Объявляем  функцию отправки строки по шине UART			(Параметр:  указатель на первый символ строки).
		void		_SerialFlush	(void							);																//	Объявляем  функцию очистки буфера UART					(Параметр:  отсутствует).
		void		_SerialBegin	(uint32_t						);																//	Объявляем  функцию установки скорости UART				(Параметр:  скорость).
};																																	//
																																	//
#endif																																//